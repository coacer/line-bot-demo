// Code generated by yo. DO NOT EDIT.
// Package golang contains the types.
package golang

import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// UserEvent represents a row from 'UserEvent'.
type UserEvent struct {
	ID        int64     `spanner:"Id" json:"Id"`               // Id
	UserID    int64     `spanner:"UserId" json:"UserId"`       // UserId
	Type      string    `spanner:"Type" json:"Type"`           // Type
	Content   string    `spanner:"Content" json:"Content"`     // Content
	CreatedAt time.Time `spanner:"CreatedAt" json:"CreatedAt"` // CreatedAt
	UpdatedAt time.Time `spanner:"UpdatedAt" json:"UpdatedAt"` // UpdatedAt
}

func UserEventPrimaryKeys() []string {
	return []string{
		"Id",
	}
}

func UserEventColumns() []string {
	return []string{
		"Id",
		"UserId",
		"Type",
		"Content",
		"CreatedAt",
		"UpdatedAt",
	}
}

func UserEventWritableColumns() []string {
	return []string{
		"Id",
		"UserId",
		"Type",
		"Content",
		"CreatedAt",
		"UpdatedAt",
	}
}

func (ue *UserEvent) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "Id":
			ret = append(ret, &ue.ID)
		case "UserId":
			ret = append(ret, &ue.UserID)
		case "Type":
			ret = append(ret, &ue.Type)
		case "Content":
			ret = append(ret, &ue.Content)
		case "CreatedAt":
			ret = append(ret, &ue.CreatedAt)
		case "UpdatedAt":
			ret = append(ret, &ue.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (ue *UserEvent) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "Id":
			ret = append(ret, ue.ID)
		case "UserId":
			ret = append(ret, ue.UserID)
		case "Type":
			ret = append(ret, ue.Type)
		case "Content":
			ret = append(ret, ue.Content)
		case "CreatedAt":
			ret = append(ret, ue.CreatedAt)
		case "UpdatedAt":
			ret = append(ret, ue.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newUserEvent_Decoder returns a decoder which reads a row from *spanner.Row
// into UserEvent. The decoder is not goroutine-safe. Don't use it concurrently.
func newUserEvent_Decoder(cols []string) func(*spanner.Row) (*UserEvent, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*UserEvent, error) {
		var ue UserEvent
		ptrs, err := ue.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &ue, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (ue *UserEvent) Insert(ctx context.Context) *spanner.Mutation {
	values, _ := ue.columnsToValues(UserEventWritableColumns())
	return spanner.Insert("UserEvent", UserEventWritableColumns(), values)
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (ue *UserEvent) Update(ctx context.Context) *spanner.Mutation {
	values, _ := ue.columnsToValues(UserEventWritableColumns())
	return spanner.Update("UserEvent", UserEventWritableColumns(), values)
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (ue *UserEvent) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	values, _ := ue.columnsToValues(UserEventWritableColumns())
	return spanner.InsertOrUpdate("UserEvent", UserEventWritableColumns(), values)
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (ue *UserEvent) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, UserEventPrimaryKeys()...)

	values, err := ue.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "UserEvent.UpdateColumns", "UserEvent", err)
	}

	return spanner.Update("UserEvent", colsWithPKeys, values), nil
}

// FindUserEvent gets a UserEvent by primary key
func FindUserEvent(ctx context.Context, db YORODB, id int64) (*UserEvent, error) {
	key := spanner.Key{id}
	row, err := db.ReadRow(ctx, "UserEvent", key, UserEventColumns())
	if err != nil {
		return nil, newError("FindUserEvent", "UserEvent", err)
	}

	decoder := newUserEvent_Decoder(UserEventColumns())
	ue, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindUserEvent", "UserEvent", err)
	}

	return ue, nil
}

// ReadUserEvent retrieves multiples rows from UserEvent by KeySet as a slice.
func ReadUserEvent(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*UserEvent, error) {
	var res []*UserEvent

	decoder := newUserEvent_Decoder(UserEventColumns())

	rows := db.Read(ctx, "UserEvent", keys, UserEventColumns())
	err := rows.Do(func(row *spanner.Row) error {
		ue, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, ue)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadUserEvent", "UserEvent", err)
	}

	return res, nil
}

// Delete deletes the UserEvent from the database.
func (ue *UserEvent) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := ue.columnsToValues(UserEventPrimaryKeys())
	return spanner.Delete("UserEvent", spanner.Key(values))
}

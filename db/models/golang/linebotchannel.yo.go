// Code generated by yo. DO NOT EDIT.
// Package golang contains the types.
package golang

import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// LineBotChannel represents a row from 'LineBotChannel'.
type LineBotChannel struct {
	ID                 int64     `spanner:"Id" json:"Id"`                                 // Id
	ChannelID          string    `spanner:"ChannelId" json:"ChannelId"`                   // ChannelId
	ChannelSecretID    string    `spanner:"ChannelSecretId" json:"ChannelSecretId"`       // ChannelSecretId
	ChannelAccessToken string    `spanner:"ChannelAccessToken" json:"ChannelAccessToken"` // ChannelAccessToken
	CreatedAt          time.Time `spanner:"CreatedAt" json:"CreatedAt"`                   // CreatedAt
	UpdatedAt          time.Time `spanner:"UpdatedAt" json:"UpdatedAt"`                   // UpdatedAt
}

func LineBotChannelPrimaryKeys() []string {
	return []string{
		"Id",
	}
}

func LineBotChannelColumns() []string {
	return []string{
		"Id",
		"ChannelId",
		"ChannelSecretId",
		"ChannelAccessToken",
		"CreatedAt",
		"UpdatedAt",
	}
}

func LineBotChannelWritableColumns() []string {
	return []string{
		"Id",
		"ChannelId",
		"ChannelSecretId",
		"ChannelAccessToken",
		"CreatedAt",
		"UpdatedAt",
	}
}

func (lbc *LineBotChannel) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "Id":
			ret = append(ret, &lbc.ID)
		case "ChannelId":
			ret = append(ret, &lbc.ChannelID)
		case "ChannelSecretId":
			ret = append(ret, &lbc.ChannelSecretID)
		case "ChannelAccessToken":
			ret = append(ret, &lbc.ChannelAccessToken)
		case "CreatedAt":
			ret = append(ret, &lbc.CreatedAt)
		case "UpdatedAt":
			ret = append(ret, &lbc.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (lbc *LineBotChannel) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "Id":
			ret = append(ret, lbc.ID)
		case "ChannelId":
			ret = append(ret, lbc.ChannelID)
		case "ChannelSecretId":
			ret = append(ret, lbc.ChannelSecretID)
		case "ChannelAccessToken":
			ret = append(ret, lbc.ChannelAccessToken)
		case "CreatedAt":
			ret = append(ret, lbc.CreatedAt)
		case "UpdatedAt":
			ret = append(ret, lbc.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newLineBotChannel_Decoder returns a decoder which reads a row from *spanner.Row
// into LineBotChannel. The decoder is not goroutine-safe. Don't use it concurrently.
func newLineBotChannel_Decoder(cols []string) func(*spanner.Row) (*LineBotChannel, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*LineBotChannel, error) {
		var lbc LineBotChannel
		ptrs, err := lbc.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &lbc, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (lbc *LineBotChannel) Insert(ctx context.Context) *spanner.Mutation {
	values, _ := lbc.columnsToValues(LineBotChannelWritableColumns())
	return spanner.Insert("LineBotChannel", LineBotChannelWritableColumns(), values)
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (lbc *LineBotChannel) Update(ctx context.Context) *spanner.Mutation {
	values, _ := lbc.columnsToValues(LineBotChannelWritableColumns())
	return spanner.Update("LineBotChannel", LineBotChannelWritableColumns(), values)
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (lbc *LineBotChannel) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	values, _ := lbc.columnsToValues(LineBotChannelWritableColumns())
	return spanner.InsertOrUpdate("LineBotChannel", LineBotChannelWritableColumns(), values)
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (lbc *LineBotChannel) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, LineBotChannelPrimaryKeys()...)

	values, err := lbc.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "LineBotChannel.UpdateColumns", "LineBotChannel", err)
	}

	return spanner.Update("LineBotChannel", colsWithPKeys, values), nil
}

// FindLineBotChannel gets a LineBotChannel by primary key
func FindLineBotChannel(ctx context.Context, db YORODB, id int64) (*LineBotChannel, error) {
	key := spanner.Key{id}
	row, err := db.ReadRow(ctx, "LineBotChannel", key, LineBotChannelColumns())
	if err != nil {
		return nil, newError("FindLineBotChannel", "LineBotChannel", err)
	}

	decoder := newLineBotChannel_Decoder(LineBotChannelColumns())
	lbc, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindLineBotChannel", "LineBotChannel", err)
	}

	return lbc, nil
}

// ReadLineBotChannel retrieves multiples rows from LineBotChannel by KeySet as a slice.
func ReadLineBotChannel(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*LineBotChannel, error) {
	var res []*LineBotChannel

	decoder := newLineBotChannel_Decoder(LineBotChannelColumns())

	rows := db.Read(ctx, "LineBotChannel", keys, LineBotChannelColumns())
	err := rows.Do(func(row *spanner.Row) error {
		lbc, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, lbc)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadLineBotChannel", "LineBotChannel", err)
	}

	return res, nil
}

// Delete deletes the LineBotChannel from the database.
func (lbc *LineBotChannel) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := lbc.columnsToValues(LineBotChannelPrimaryKeys())
	return spanner.Delete("LineBotChannel", spanner.Key(values))
}
